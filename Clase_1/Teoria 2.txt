
  Podemos ver que una clase se define en tres partes: 

    üëâüèª Nombre de la clase: comienza con mayuscula "Contador(object)"
    üëâüèª Variables de instancias: en minusculas con un valor por defecto "valor = 0"
    üëâüèª Protocolo: se debe especificar por cada mensaje el nombre del 
        metodo y sus parametros (optativo) "incrementar()"



___________________________________________________________________________________________

Propiedades: 

    Existen tres categorias de propiedades:
      ‚úÖ  public: pueden ser accedidas por cualquiera
      üîê  protected: son accedidas por la clase que la define o su decendencia
      ‚õîÔ∏è  private: son accedidas solo por la clase que la define

    A las propiedades accederemos mediante el uso de Guetters y Setters
    De esta manera Python utiliza el decorador @property para definir el acceso a dichas propiedades.

    Por ejemplo en el caso de tener una propiedad privada __valor tendriamos el siguiente escenario:

      class Contador():
          __valor = 0 

          @property 
          def valor(self): return self.__valor

          @valor.setter
          def valor(self, un_valor): self.__valor = un_valor

    Para utilizarlo:

      contador = Contador()

      print(contador.valor)    >>> 0

      contador.valor = 5

      print(contador.valor)   >>> 5

    
    Por el contrario si intentamos:

      contador.__valor = 9

      Veremos que la propiedad no fue accedida.


    Veamos el ejemplo en el script calculadora.py

    Los guiones bajo nos permiten darle un nivel de acceso a las propiedades, 
    de igual manera funciona para los metodos.


____________________________________________________________________________________________

Constructores:

    Existe un tiempo entre:
      ‚Ä¢ La creaci√≥n de un objeto.
      ‚Ä¢ La adquisici√≥n de los colaboradores que ese objeto necesita
        para llevar adelante sus responsabilidades.
      ‚Ä¢ Mientras tanto, el objeto est√° en un estado
        ‚Äúinconsistente‚Äù.
      ‚Ä¢ ¬øC√≥mo impedimos que esto suceda?
      ‚Ä¢ Inicializar al objeto con valores por defecto.
      ‚Ä¢ No permitir la creaci√≥n de un objeto a menos que nos
        pasen la informaci√≥n m√≠nima indispensable.


    Constructores:
      ‚Ä¢ Son mensajes de clase relacionados a la construcci√≥n
        de objetos bien formados.
      ‚Ä¢ Podemos crear constructores que tomen como
        par√°metros los colaboradores b√°sicos del nuevo
        objeto
      ‚Ä¢ As√≠, creamos objetos bien formados.
      ‚Ä¢ Un objeto bien formado se encuentra en estado consistente
        desde su creaci√≥n.


    En Python podemos hacer uso del mismo a traves del metodo __init__
    Para entenderlo mejor veamos el script usuario.py