""" Ejercitaci√≥n de la clase 1 

    Para realizar la practica debera clonar el repositorio.
    Seguidamente crear una rama con su: "nombre-apellido", 
    luego crear una carpeta con su: "nombre_apellido" y dentro 
    creara los modulos de clase y testing.

    Ejemplo:

        >>> niko@desktop:~/Python/POO-Python$  tree

            .
            |-- Clase_1                     # <=== Paquete Clase_1
            |   |-- Ejercitacion.txt
            |   |-- Teoria\ 1
            |   |-- __init__.py    # Clase_1 tiene un script __init__.py para poder ser accedido
            |   |-- __test__                # <=== Paquete __test__
            |   |   |-- Testing
            |   |   |-- __init__.py         # __test__ tiene un script __init__.py para poder ser accedido
            |   |   |-- calculadora_test.py
            |   |   |-- contador_test.py
            |   |   `-- usuario_test.py
            |   |-- calculadora.py
            |   |-- contador.py
            |   |-- overloading
            |   |   |-- Teoria.txt
            |   |   `-- overloading.png
            |   `-- usuario.py
            `-- README.md

    Nota: para correr los test siguiendo la estructura antes especificada 
    debe hacer uso del shortcut: ctrl + shift + P 
    En el cuadro de busqueda que se abre escriba: Python: Configure Tests
    Seleccione framework: unittest
    Seleccione el directorio con su nombre_apellido
    Seleccione *_test.py 
    Por ultimo ya puede ir al icono de Testing y sus test estaran cargados 
    y listos para ejecutarse.

"""
______________________________________________________

"""
    Ejercicio 1:
        Modelar el objeto caja de ahorro:
            - un titular
            - un saldo
        
        y debera poder:
            - depositar un monto
            - puedeExtraer un monto
            - extraer un monto
            - en el caso de querer extraer un monto superior 
              al monto disponible arrojara una 
              excepcion ValueError("Imposible realizar extracci√≥n.")

        Realizar los test necesarios que validen 
        el comportamiento.  
"""

"""
    Ejercicio 2:
        Modelar el objeto fecha en donde tendra:
            - un dia 
            - un mes 
            - un anio 
        
        y debera poder compararse con otra fecha:
            - (==, <, <=, >=, >)
            - esta entre "una_fecha" y "otra_fecha"

        Realizar los test necesarios que validen 
        el comportamiento.  
"""

"""
    Ejercicio 3:
        Modelar la clase Robot con las siguientes caracteristicas:
            - Un robot posee una bateria en la cual almacena su energia.
              La carga de la bateria de encuentra en el rango de 0 a 100.
            - Un robot puede:
                # caminar(metros): le consume 1 unidad cada 10 metros.
                # cargarBateria(una_carga): le agrega una determinada cantidad
                  de unidades, pero no puede superar las 100 unidades de la bateria.
                # disparar(un_objetivo): le consume el 10% de la bateria que posea. 

    Realizar los test necesarios que validen 
    el comportamiento.         
"""

"""
    Ejercicio 4:
        Modelar la clase Alien con las siguientes caracteristicas:
            - Un alien posee una energia que va en el rango de 0 a 5.
            - Un alien puede:
                # estaVivo: retorna verdadero solo si su energia es mayor a 0.
                # recibirDisparo: decrementa la energia del alien en 1.
                # reponerse: aumenta la energia del alien en dos unidades. 

    Realizar los test necesarios que validen 
    el comportamiento del alien, ademas verifique que cuando el robot realice un 
    disparo al alien decremente la energia del mismo.      
"""


"""
    Ejercicio 5:
        Modelar la clase Mosquito para que el siguiente test se ejecute exitosamente:

        def test_mosquitoRecibioDisparo(self):
            robot  = Robot()
            mosquito = Mosquito()
            mosquito.inicializar()

            self.assertFalse(mosquito.recibioDisparo())

            robot.disparar(mosquito)

            self.assertTrue(mosquito.recibioDisparo())
            

    Pasos sugeridos:
        1. Identifique los mensajes que debe entender el objeto ‚Äúmosquito‚Äù.
        2. Implemente dichos mensajes y escriba los tests que prueben su correcto funcionamiento.
        3. Implemente el test planteado originalmente y verifique que se ejecute correctamente.
"""

"""
    Ejercicio 6: 
        Modelar la clase Banco:
            - Un banco puede transferir un monto de una cuenta a otra cuenta.
"""

"""
    Ejercicio 7:
        Extender la clase CajaDeAhorro para que:
            - Tenga una cantidad de extracciones fijas. 
            - Pueda restaurar la cantidad de extracciones. 
"""

"""
    Ejercicio 8:
        Modelar la clase CuentaCorriente:
            - un titular
            - un saldo
            - descubierto naximo
        
        y debera poder:
            - depositar un monto
            - puedeExtraer un monto
                üëâüèª un monto <= ( saldo + descubierto maximo )
            - extraer un monto
            - en el caso de querer extraer un monto superior 
              al monto disponible arrojara una 
              excepcion ValueError("Imposible realizar extracci√≥n.")

        Realizar los test necesarios que validen 
        el comportamiento.  
"""

"""
    Ejercicio 9:
        Extienda el modelo del Robot para que ahora pueda recibir 
        un disparo. Recibir un disparo le consume el 30% de su bateria.

        Realice los test necesarios que validen su comportamiento.
"""