
   """ Herencia """

  -> Herencia:
      Nos permite realizar relaciones jerarquicas entre clases, 
      de forma que atributos y metodos seran heredados por las subclases, 
      esto fomenta la reutilización de codigo.

     Asi podemos ver que la clase Animal tiene su estado y comportamiento, entonces podemos crear una 
     subclase Perro la cual heredará atributos y metodos de la clase Animal.

Veamos la clase Animal y como puede heredar la clase Gato


____________________________________________________________________________________________________

   Qué es una clase abstracta

      ✅ Las clases abstractas no representan algo específico y las podemos usar para crear otras clases. 

      ✅ No pueden ser instanciadas, por lo que no podemos crear nuevos objetos con ellas.

      ✅ Solamente se pueden usar para construir subclases. 

      📚 Resumiendo, las clases abstractas define una interfaz común para las subclases. 
      📚 Imponiendo además lo métodos que deber ser implementados para evitar inconsistencias entre las subclases.


   Creación de clases abstractas en Python

      Para poder crear clases abstractas en Python es necesario importar la clase "ABC" y el decorador "abstractmethod" 
      del modulo "abc" (Abstract Base Classes). 

   from abc import ABC, abstractmethod

      class Animal(ABC):
         @abstractmethod
         def mover(self):
            pass

   
   Ahora si se intenta crear una instancia de la clase animal, Python no lo permitirá indicando que no es posible. 

   Por otro lado, desde los métodos de las subclases podemos llamar a las implementaciones de la clase abstracta 
   con el metodo super() seguido del nombre del método.

      class Animal(ABC):

         @abstractmethod
         def mover(self):
            pass         
         
         def comer(self):
            print('Animal come')

        
      class Gato(Animal):
         def mover(self):
            print('Mover gato')
            
            
         def comer(self):
            super().comer()
            print('Gato come')
            

      g = Gato()
      g.mover()
      g.comer()

Conclusiones
   En esta entrada se ha visto cómo se pueden usar el patrón de clase abstracta en Python. 
   Un patrón que es clave en programación orientada a objetos para evitar la repetición de código, 
   centralizando las funcionalidades comunes en una clase que sirve de base para las clases hijas.


____________________________________________________________________________________________________

  """ Polimorfismo """

   La palabra Polimorfismo viene del griego "polys" que significa muchos
   y "morfo" que refiere a forma, su conjunto define la cualidad de 
   tener multiples formas.

   Dos objetos son polimorficos con respecto a un mensaje si pueden entender ese mensaje, 
   aún cuando reaccionen de manera diferente al mismo.

     Ejercicio:
      Clases:
         Suma
         Resta
         Multiplicacion
         Division

      Clase Abstracta OperacionMatematica
        metodo abstracto:
            👉🏻 operar()
         
      Script operaciones_matematica.py

   Como podemos ver las cuatro clases implementan el metodo operar() aunque sus implementaciones
   sean distintas.

____________________________________________________________________________________________________
   Overloading

   Veamos el objeto Fecha
____________________________________________________________________________________________________

Magnitudes lineales
   👉🏻 Cualquier magnitud que se pueda comparar linealmente puede utilizar la misma implementacion. 
   👉🏻 Solo necesita definir dos conceptos:
      -> igualdad                                     ==
      -> ser menor a otra magnitud de mi clase        <
      
Vemaos la implementacion de la clase mi_fecha
   la clase MiFecha:
      - (==, <, <=, >=, >)
      - esta entre "una_fecha" y "otra_fecha"


Veamos la implementación de numero.py para el cual vamos a definir el mismo protocolo que realizamos en 
   La clase Numero: 
      - (==, <, <=, >=, >)
      - esta entre "un_numero" y "otro_numero"



Pongamos en práctica.
Modelemos la clase MagnitudLineal 

   Protocolo:
      👉🏻 <= otra_magnitud                       # metodo concreto
      👉🏻 > otra_magnitud                        # metodo concreto
      👉🏻 >= otra_magnitud                       # metodo concreto
      👉🏻 entre(una_magnitud, otra_magnitud)     # metodo concreto


      👉🏻 == otra_magnitud                       # metodo abstracto
      👉🏻 <  otra_magnitud                       # metodo abstracto

Por ultimo en MiFecha comentemos los metodos: "__le__" - "__ge__" - "__ge__" - "entreDosFechas"
Podemos ver que al correr los test nos acusan error porque no encuentra 
los metodos.

 - Ahora importemos la clase MagnitudLineal y hagamos que MiFecha herede de ella.
 - Al correr los test 🧪 estos pasan correctamente ✅.

Excepto los del mensaje "entreDosFechas" puesto que no encuentra esa definición de mensaje.
podemos hacer dos cosas:
   -> Envolver el mensaje de la superclase 
         ejemplo: 
                def entreDosFechas(self, fecha_inicio, fecha_fin):
                     """ Devuelve un booleano si se encuentra entre las
                           dos fechas que recibe como parametro."""
                     return super().entre(fecha_inicio, fecha_fin)

   -> Cambiar los nombres en la suite de test 

Realicemos el mismo procedimiento con Numero. 
corran los test.

Si ahora modelaramos la clase Character sabiendo que cada caracter tiene un valor numerico ASCII
   Fuente: https://elcodigoascii.com.ar/

   En python contamos con dos funciones o metodos 
      -> ord('a')   # devuelve el valor ASCII
      >>> 97 

      -> chr(97)    # devuelve el caracter correspondiente
      >>> 'a'

Modelemos ahora Character haciendolo extender de MagnitudLineal y definamos los dos metodos
abstractos: 
   "__eq__"    y    "__lt__"

Realicen los test que validen su comportamiento.

Los metodos concretos de la clase Abstracta se resulven en base a los metodos concretos de las
subclases.


 


