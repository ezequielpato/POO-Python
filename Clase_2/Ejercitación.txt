########  --- Práctica --- ########

"""
    Ejercicio 1:
        Estación de servicio

        Surtidor: 
            ✅ Poseen una carga inicialmente en 0
            ✅ Posee una capacidad maxima al instanciarse
            ✅ Sabe si esta vacío 
            ✅ Sabe cuanto lugar libre tiene para cargar
            ✅ Puede recibir una carga

        Estacion:
            ✅ Tienen un conjunto de surtidores
            ✅ Al instanciarse no tendrá surtidores
            ✅ Podrá agregar un surtidor
            ✅ Saber cuantos surtidores tiene
            ✅ Saber cuantos surtidores vacios tiene 
            ✅ Saber cuáles son su surtidores vacios
            ✅ Sumar total de litros que faltan para 
                completar su capacidad total
            ✅ Obtener el costo total para completar 
                la carga faltante dado un precio por litro
"""

"""
    Ejercicio 2:

        Implementar la clase Porcentaje tal que respete el siguiente protocolo:
        👉🏻 valor(unNumero). Indica el valor porcentual que va a representar el objeto.
        👉🏻 aplicarA(unNumero). Retorna el resultado de aplicar el porcentaje a un numero.

        Defina los tests de unidad que considere necesarios para esta clase.
"""

"""
    Ejercicio 3:

        Implemente la clase Punto: 
            que represente un punto en el plano de coordenadas (x,y). 
        Las instancias de dicha clase deben responder al mensaje:
        👉🏻 distanciaA(otroPunto). Que retorna la distancia entre dos puntos
                usando el teorema de Pitágoras.
        👉🏻 si es igual a otro punto.

        Pista:
            🛠 El metodo abs(un_numero) devuelve el valor absoluto de un numero
            ej: 
                abs(2)    >>> 2
                abs(-2)   >>> 2

            🛠 El metodo math.pow(un_numero, 2) eleva un numero al cuadrado
            🛠 El metodo math.sqrt(un_numero) devuelve la raiz cuadrada
             👉🏻 Para hacer uso de estos se debe importar el modulo math incluido en Python
                
            ej:
                import math

                math.pow(3, 2) >>> 9
                math.sqrt(9)   >>> 3
            
        Defina los tests de unidad que considere necesarios para esta clase.
        Importante: para los assertEqual() de los test no olvide redondear 
        con el metodo round(un_numero, 2) para indicarle cuantos decimales tomar 
        en cuenta.

        Algunos test:
            🧪 Dos puntos con las mismas coordenadas
            🧪 Dos puntos con las mismas coordenadas en X
            🧪 Dos puntos con las mismas coordenadas en Y
"""

"""
    Ejercicio 4:
        La empresa para la que usted trabaja planea desarrollar un software para la visualización de figuras geométricas. Para esto se le pide que:
        a) Modele el concepto de una círculo en términos de su centro y su radio.
        b) Pueda saber si un punto se encuentra dentro de un círculo.
        c) Pueda saber si dos circulos son iguales en torno a su radio.
        d) Pueda saber si un circulo contiene otro circulo.
        e) Pueda saber si dos circulos estan superpuestos.
        f) Pueda saber si dos círculos se intersecan o no.
        g) Generar una excepción en el caso de que el radio pasado como parametro 
            sea menor a 1. ValueError('Radio no valido!.')

        Implemente las clases necesarias y sus tests.
        Puede reutilizar la clase Punto.
"""

"""
    Ejercicio 5:
        Para un sistema de cátedras en una facultad se requiere llevar un registro estudiantes y las notas de los parciales que han rendido. De cada estudiante se sabe su nombre y apellido.
        Implemente las clases necesarias y sus correspondientes tests para poder contestar a las siguientes preguntas:
        a) Saber si un estudiante aprobó la cursada (la cursada se considera aprobada si todas sus notas son
        mayores o iguales a 4).
        b) Saber si un estudiante promocionó la cursada (la cursada se considera aprobada si todas sus notas
        son mayores o iguales a 7).
        c) Saber la cantidad de notas menores a 4 que sacó un estudiante.
"""



"""
    Ejercicio 6:
        Modelar: Lapso de tiempo

        Estado:
            👉🏻 desde: unaFecha
            👉🏻 hasta: unaFecha
        
        Protocolo:
            ✅ incluyeUnaFecha
            ✅ cantidadDeDias

        📚 incluir un constructor 
        📚 la cantidad de dias segun el mes:
           1- Enero       -> 31
           2- Febrero     -> 28
           3- Marzo       -> 31
           4- Abril       -> 30

           5- Mayo        -> 31
           6- Junio       -> 30
           7- Julio       -> 31
           8- Agosto      -> 31

           9- Septiembre  -> 30
          10- Octubre     -> 31
          11- Noviembre   -> 30
          12- Diciembre   -> 31

       📚 Realizar los test que validen su comportamiento.
"""

"""
    Usted trabaja en una empresa que se dedica a la entrega de paquetes y desea optimizar los costos de
    envíos. La empresa cuenta con una flota de motos, autos y utilitarios para hacer los envíos, los cuales
    poseen distintas características:
        ✅ Las motos poseen un tanque de 11 litros y tienen una autonomía de 20 km por litro. Pueden llevar
        cargas de hasta 2 kg.
        ✅ Los autos poseen un tanque de 45 litros y tienen una autonomía de 10 km por litro. Pueden llevar
        cargas de hasta 250 kg.
        ✅ Los utilitarios poseen un tanque de 60 litros y tienen una autonomía de 9 km por litro. Pueden
        llevar cargas de hasta 400 kg.

    Su modelo debe permitir:
        👉🏻 Para un vehículo dado, saber la distancia máxima que puede recorrer.
        👉🏻 Para un vehículo dado, saber el consumo de nafta cada 100 km.
        👉🏻 Para una flota de vehículos, encontrar el vehículo mas económico para llevar una carga de X kg a
        una distancia de Y km.

    Usted debe:
        a) Implementar las clases necesarias para modelar su solución con los tests de unidad
        correspondientes.
        b) Mostrar en un playground cómo crear una flota compuesta por una moto, un auto y un utilitario.
        c) Utilizando la flota creada anteriormente, muestre cómo obtener el vehículo mas económico para
        realizar los siguientes envíos:
            1. Una carga de 1 kg a 3 km de distancia.
            2. Una carga de 2 kg a 300 km de distancia.
            3. Una carga de 250 kg a 300 km de distancia.
"""